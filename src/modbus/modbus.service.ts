import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { Interval } from '@nestjs/schedule';
import ModbusRTU from 'modbus-serial';
import { ModbusGateway } from './modbus.gateway';
import { DeviceState } from './device.types';

interface ModbusResponse {
	data: number[];
}

interface ModbusError extends Error {
	message: string;
}

interface ModbusRequest {
	id: string;
	deviceId: number;
	type: 'read' | 'write';
	register: number;
	value?: number;
	priority: 'high' | 'normal' | 'low';
	timestamp: number;
	retryCount?: number;
}

@Injectable()
export class ModbusService {
	private client: ModbusRTU;
	private readonly logger = new Logger(ModbusService.name);
	private isConnected = false;
	private readonly deviceIds = [5, 6, 7];
	private devicesState: Map<number, DeviceState>;
	private isPolling = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞

	// –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
	private requestQueue: ModbusRequest[] = [];
	private isProcessingQueue = false;
	private currentDeviceId: number | null = null; // –¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	private requestLock = false; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
	private readonly MAX_RETRIES = 3;
	private readonly REQUEST_TIMEOUT = 5000; // 5 —Å–µ–∫—É–Ω–¥
	private readonly DEVICE_SWITCH_DELAY = 200; // 200ms –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	private readonly REQUEST_DELAY = 100; // 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã master'–∞
	private masterStats = {
		totalRequests: 0,
		successfulRequests: 0,
		failedRequests: 0,
		averageResponseTime: 0,
		lastRequestTime: 0,
		connectionErrors: 0,
		timeoutErrors: 0,
		deviceConflicts: 0,
	};

	constructor(
		@Inject(forwardRef(() => ModbusGateway))
		private readonly modbusGateway: ModbusGateway,
	) {
		this.client = new ModbusRTU();
		this.devicesState = new Map();
		this.initializeDevices();
		this.connect();
		this.startQueueProcessor();
	}

	private initializeDevices() {
		this.deviceIds.forEach((deviceId) => {
			this.devicesState.set(deviceId, this.getInitialState(deviceId));
		});
	}

	private getInitialState(deviceId: number): DeviceState {
		return {
			id: `AC_${deviceId}`,
			name: `–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä ${deviceId}`,
			isOnline: false,
			mode: '',
			isOn: false,
			setTemperature: 0,
			fanSpeed: 0,
			temperature: 0,
			waterTemperature: 0,
			pumpStatus: false,
			valveStatus: false,
			errors: {
				tempSensorError: false,
				waterTempSensor1Error: false,
				waterTempSensor2Error: false,
				fanSpeedError: false,
				pumpError: false,
			},
			protectionState: 0,
		};
	}

	private convertMode(mode: number): string {
		switch (mode) {
			case 0:
				return '–í—ã–∫–ª—é—á–µ–Ω';
			case 1:
				return '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ';
			case 2:
				return '–û–±–æ–≥—Ä–µ–≤';
			case 3:
				return '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è';
			case 4:
				return '–ê–≤—Ç–æ';
			default:
				return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
		}
	}

	private async connect() {
		try {
			// –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è master'–∞
			await this.client.connectTCP('192.168.1.162', {
				port: 502,
				timeout: 10000, // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			});

			// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ master'–∞
			this.client.setTimeout(this.REQUEST_TIMEOUT); // —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π

			this.isConnected = true;
			this.logger.log('‚úÖ Modbus Master —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏');
		} catch (error) {
			const modbusError = error as ModbusError;
			this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Modbus Master: ${modbusError.message}`);
			this.isConnected = false;
			this.masterStats.connectionErrors++;
		}
	}

	/**
	 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	 */
	private async switchToDevice(deviceId: number): Promise<boolean> {
		if (this.requestLock) {
			this.logger.warn(`[${deviceId}] –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ...`);
			return false;
		}

		if (this.currentDeviceId === deviceId) {
			return true; // —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
		}

		this.requestLock = true;
		try {
			// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
			await this.timeout(this.DEVICE_SWITCH_DELAY);

			this.client.setID(deviceId);
			this.currentDeviceId = deviceId;

			this.logger.debug(`[${deviceId}] –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ`);
			return true;
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${error}`);
			return false;
		} finally {
			this.requestLock = false;
		}
	}

	/**
	 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Modbus –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å retry
	 */
	private async executeModbusOperation<T>(
		deviceId: number,
		operation: () => Promise<T>,
		operationName: string,
	): Promise<T | null> {
		for (let attempt = 0; attempt <= this.MAX_RETRIES; attempt++) {
			try {
				// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
				const switched = await this.switchToDevice(deviceId);
				if (!switched) {
					this.logger.warn(
						`[${deviceId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è ${operationName}`,
					);
					return null;
				}

				// –ñ–¥–µ–º –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
				if (attempt > 0) {
					await this.timeout(this.REQUEST_DELAY * (attempt + 1));
				}

				const startTime = Date.now();
				const result = await operation();
				const responseTime = Date.now() - startTime;

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				this.updateMasterStats(true, responseTime);

				if (attempt > 0) {
					this.logger.log(`[${deviceId}] ${operationName} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ ${attempt + 1} –ø–æ–ø—ã—Ç–∫–∏`);
				}

				return result;
			} catch (error) {
				const errorMessage = error instanceof Error ? error.message : String(error);

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
				if (
					errorMessage.includes('Unexpected data error') ||
					errorMessage.includes('expected address')
				) {
					this.masterStats.deviceConflicts++;
					this.logger.warn(`[${deviceId}] –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ ${operationName}: ${errorMessage}`);
				} else if (errorMessage.includes('timeout') || errorMessage.includes('ETIMEDOUT')) {
					this.masterStats.timeoutErrors++;
					this.logger.warn(`[${deviceId}] –¢–∞–π–º–∞—É—Ç –≤ ${operationName}: ${errorMessage}`);
				} else {
					this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ –≤ ${operationName}: ${errorMessage}`);
				}

				this.updateMasterStats(false, 0);

				// –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
				if (attempt === this.MAX_RETRIES) {
					this.logger.error(
						`[${deviceId}] ${operationName} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ ${this.MAX_RETRIES + 1} –ø–æ–ø—ã—Ç–æ–∫`,
					);
					return null;
				}

				// –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
				await this.timeout(this.REQUEST_DELAY * (attempt + 2));
			}
		}

		return null;
	}

	/**
	 * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
	 */
	private startQueueProcessor() {
		setInterval(async () => {
			if (!this.isProcessingQueue && this.requestQueue.length > 0) {
				await this.processRequestQueue();
			}
		}, 100); // –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 100ms
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
	 */
	private async processRequestQueue() {
		if (this.isProcessingQueue || this.requestQueue.length === 0) return;

		this.isProcessingQueue = true;

		try {
			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
			this.requestQueue.sort((a, b) => {
				const priorityOrder = { high: 3, normal: 2, low: 1 };
				const aPriority = priorityOrder[a.priority];
				const bPriority = priorityOrder[b.priority];

				if (aPriority !== bPriority) {
					return bPriority - aPriority; // –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º
				}

				return a.timestamp - b.timestamp; // FIFO –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
			});

			const request = this.requestQueue.shift();
			if (!request) return;

			this.logger.debug(
				`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: ${request.type} register ${request.register} device ${request.deviceId} (${request.priority} priority)`,
			);

			const startTime = Date.now();
			let success = false;

			try {
				if (request.type === 'read') {
					const result = await this.executeModbusOperation(
						request.deviceId,
						() => this.client.readHoldingRegisters(request.register, 1),
						`—á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ ${request.register}`,
					);
					success = result !== null;
					if (success && result) {
						this.logger.debug(`üìñ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä ${request.register}: ${result.data[0]}`);
					}
				} else if (request.type === 'write' && request.value !== undefined) {
					const result = await this.executeModbusOperation(
						request.deviceId,
						() => this.client.writeRegister(request.register, request.value!),
						`–∑–∞–ø–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞ ${request.register}`,
					);
					success = result !== null;
					if (success) {
						this.logger.debug(`‚úèÔ∏è –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä ${request.register}: ${request.value}`);
					}
				}
			} catch (error) {
				this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error}`);
			}
		} finally {
			this.isProcessingQueue = false;
		}
	}

	/**
	 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ master'–∞
	 */
	private updateMasterStats(success: boolean, responseTime: number) {
		this.masterStats.totalRequests++;
		this.masterStats.lastRequestTime = Date.now();

		if (success) {
			this.masterStats.successfulRequests++;
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
			const totalTime =
				this.masterStats.averageResponseTime * (this.masterStats.successfulRequests - 1) +
				responseTime;
			this.masterStats.averageResponseTime = totalTime / this.masterStats.successfulRequests;
		} else {
			this.masterStats.failedRequests++;
		}
	}

	/**
	 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
	 */
	private addToQueue(request: Omit<ModbusRequest, 'id' | 'timestamp'>): string {
		const id = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
		const queueRequest: ModbusRequest = {
			...request,
			id,
			timestamp: Date.now(),
			retryCount: 0,
		};

		this.requestQueue.push(queueRequest);
		this.logger.debug(
			`üìã –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å: ${id} (${request.type} ${request.register} device ${request.deviceId})`,
		);
		return id;
	}

	/**
	 * –ü–∞–∫–µ—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	 */
	async readRegistersBatch(deviceId: number, registers: number[]): Promise<Map<number, number>> {
		const results = new Map<number, number>();

		try {
			const switched = await this.switchToDevice(deviceId);
			if (!switched) {
				this.logger.warn(
					`[${deviceId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è`,
				);
				return results;
			}

			// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
			const sortedRegisters = [...registers].sort((a, b) => a - b);
			let currentGroup: number[] = [];
			const groups: number[][] = [];

			for (let i = 0; i < sortedRegisters.length; i++) {
				if (
					currentGroup.length === 0 ||
					sortedRegisters[i] === currentGroup[currentGroup.length - 1] + 1
				) {
					currentGroup.push(sortedRegisters[i]);
				} else {
					groups.push([...currentGroup]);
					currentGroup = [sortedRegisters[i]];
				}
			}
			if (currentGroup.length > 0) {
				groups.push(currentGroup);
			}

			// –ß–∏—Ç–∞–µ–º –≥—Ä—É–ø–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
			for (const group of groups) {
				const startRegister = group[0];
				const count = group.length;

				const result = await this.executeModbusOperation(
					deviceId,
					() => this.client.readHoldingRegisters(startRegister, count),
					`–ø–∞–∫–µ—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ ${startRegister}-${startRegister + count - 1}`,
				);

				if (result) {
					group.forEach((register, index) => {
						results.set(register, result.data[index]);
					});
				}
			}
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è: ${error}`);
		}

		return results;
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã master'–∞
	 */
	getMasterStats() {
		const successRate =
			this.masterStats.totalRequests > 0
				? ((this.masterStats.successfulRequests / this.masterStats.totalRequests) * 100).toFixed(2)
				: '0.00';

		return {
			...this.masterStats,
			successRate: `${successRate}%`,
			queueLength: this.requestQueue.length,
			currentDevice: this.currentDeviceId,
			isProcessing: this.isProcessingQueue,
			connectionStatus: this.isConnected,
		};
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
	 */
	async checkDeviceAvailability(deviceId: number): Promise<boolean> {
		try {
			this.logger.log(`[${deviceId}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...`);

			// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
			const res: ModbusResponse = (await Promise.race([
				this.client.readHoldingRegisters(1601, 1),
				new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000)),
			])) as ModbusResponse;

			this.logger.log(`[${deviceId}] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${res.data[0]}`);
			return true;
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : String(error);
			this.logger.error(`[${deviceId}] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${errorMessage}`);
			return false;
		}
	}

	// --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ---
	@Interval(10000) // –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
	async pollDevices() {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å
		if (this.isPolling) {
			this.logger.warn('–û–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ü–∏–∫–ª');
			return;
		}

		if (!this.isConnected) {
			await this.connect();
			if (!this.isConnected) {
				this.modbusGateway.broadcastError('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
				return;
			}
		}

		this.isPolling = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
		const updatedDevices: DeviceState[] = [];

		this.logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${this.deviceIds.join(', ')}`);

		try {
			for (const deviceId of this.deviceIds) {
				this.logger.log(`=== –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} ===`);
				this.logger.log(
					`[${deviceId}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} –∏–∑ —Å–ø–∏—Å–∫–∞: ${this.deviceIds.join(', ')}`,
				);

				// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
				const isAvailable = await this.checkDeviceAvailability(deviceId);
				if (!isAvailable) {
					this.logger.log(`[${deviceId}] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å`);
					const offlineState = {
						...this.devicesState.get(deviceId)!,
						isOnline: false,
					};
					this.devicesState.set(deviceId, offlineState);
					updatedDevices.push(offlineState);
					continue;
				}

				try {
					this.logger.log(`[${deviceId}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...`);
					this.client.setID(deviceId);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã...`);
					const mode = await this.getOperatingMode(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —É—Å—Ç–∞–≤–∫—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã...`);
					const temp = await this.getTemperatureSetpoint(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞...`);
					const speed = await this.getFanSpeed(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞...`);
					const airTemp = await this.getAirTemperature(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã...`);
					const waterTemp = await this.getWaterTemperature(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–º–ø—ã...`);
					const pumpStatus = await this.getPumpStatus(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∞–ø–∞–Ω–∞...`);
					const valveStatus = await this.getValveStatus(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏...`);
					const errors = await this.getErrors(deviceId);
					await this.timeout(200);

					this.logger.log(`[${deviceId}] –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã...`);
					const protection = await this.getProtectionState(deviceId);
					await this.timeout(200);

					const updatedState: DeviceState = {
						...this.devicesState.get(deviceId)!,
						isOnline: true,
						mode: mode !== null ? this.convertMode(mode) : '',
						isOn: mode !== null && mode > 0,
						setTemperature: temp || 0,
						fanSpeed: speed || 0,
						temperature: airTemp || 0,
						waterTemperature: waterTemp || 0,
						pumpStatus: pumpStatus || false,
						valveStatus: valveStatus || false,
						errors: errors || this.devicesState.get(deviceId)!.errors,
						protectionState: protection || 0,
					};

					this.devicesState.set(deviceId, updatedState);
					updatedDevices.push(updatedState);

					this.logger.log(
						`[${deviceId}] –£—Å–ø–µ—à–Ω–æ: —Ä–µ–∂–∏–º=${mode}, —É—Å—Ç–∞–≤–∫–∞=${temp}, —Å–∫–æ—Ä–æ—Å—Ç—å=${speed}, ` +
							`—Ç–µ–º–ø.–≤–æ–∑–¥—É—Ö–∞=${airTemp}, —Ç–µ–º–ø.–≤–æ–¥—ã=${waterTemp}, –ø–æ–º–ø–∞=${pumpStatus}, –∫–ª–∞–ø–∞–Ω=${valveStatus}, ` +
							`–æ—à–∏–±–∫–∏=${JSON.stringify(errors)}, –∑–∞—â–∏—Ç–∞=${protection}`,
					);
				} catch (error) {
					this.logger.error(`[${deviceId}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${error}`);
					const offlineState = {
						...this.devicesState.get(deviceId)!,
						isOnline: false,
					};
					this.devicesState.set(deviceId, offlineState);
					updatedDevices.push(offlineState);
				}

				this.logger.log(`=== –ö–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceId} ===`);
				await this.timeout(500); // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–∞–º–∏
			}

			this.logger.log(
				`–ó–∞–≤–µ—Ä—à–µ–Ω –æ–ø—Ä–æ—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedDevices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`,
			);
			this.modbusGateway.broadcastDevicesState(updatedDevices);
		} catch (error) {
			this.logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ pollDevices: ${error}`);
		} finally {
			this.isPolling = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
		}
	}

	// Timeout promise function
	private async timeout(ms: number): Promise<void> {
		return new Promise((resolve) => setTimeout(resolve, ms));
	}

	// --- –ú–µ—Ç–æ–¥—ã —á—Ç–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
	async getOperatingMode(deviceId: number): Promise<number | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (1601)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1601, 1);
				this.logger.debug(`[${deviceId}] –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${res.data[0]}`);
				return res;
			},
			'—á—Ç–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã',
		).then((result) => result?.data[0] ?? null);
	}

	async getTemperatureSetpoint(deviceId: number): Promise<number | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (1602)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1602, 1);
				this.logger.debug(`[${deviceId}] –£—Å—Ç–∞–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: ${res.data[0]}`);
				return res;
			},
			'—á—Ç–µ–Ω–∏–µ —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
		).then((result) => result?.data[0] ?? null);
	}

	async getFanSpeed(deviceId: number): Promise<number | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ (1603)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1603, 1);
				this.logger.debug(`[${deviceId}] –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞: ${res.data[0]}`);
				return res;
			},
			'—á—Ç–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞',
		).then((result) => result?.data[0] ?? null);
	}

	async getAirTemperature(deviceId: number): Promise<number | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞ (1606)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1606, 1);
				const temp = res.data[0] * 0.5 - 20;
				this.logger.debug(`[${deviceId}] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: ${temp}¬∞C (raw: ${res.data[0]})`);
				return { ...res, temp };
			},
			'—á—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞',
		).then((result) => result?.temp ?? null);
	}

	async getWaterTemperature(deviceId: number): Promise<number | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã (1607)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1607, 1);
				const temp = res.data[0] * 0.5 - 20;
				this.logger.debug(`[${deviceId}] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: ${temp}¬∞C (raw: ${res.data[0]})`);
				return { ...res, temp };
			},
			'—á—Ç–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã',
		).then((result) => result?.temp ?? null);
	}

	async getPumpStatus(deviceId: number): Promise<boolean | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–º–ø—ã (1613)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1613, 1);
				const status = (res.data[0] & 0x01) !== 0;
				this.logger.debug(`[${deviceId}] –°—Ç–∞—Ç—É—Å –ø–æ–º–ø—ã: ${status} (raw: ${res.data[0]})`);
				return { ...res, status };
			},
			'—á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–º–ø—ã',
		).then((result) => result?.status ?? null);
	}

	async getValveStatus(deviceId: number): Promise<boolean | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞–ø–∞–Ω–∞ (1619)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1619, 1);
				const status = (res.data[0] & (1 << 9)) !== 0;
				this.logger.debug(`[${deviceId}] –°—Ç–∞—Ç—É—Å –∫–ª–∞–ø–∞–Ω–∞: ${status} (raw: ${res.data[0]})`);
				return { ...res, status };
			},
			'—á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞–ø–∞–Ω–∞',
		).then((result) => result?.status ?? null);
	}

	async getErrors(deviceId: number): Promise<DeviceState['errors'] | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (1614)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1614, 1);
				const errors = {
					tempSensorError: (res.data[0] & (1 << 2)) !== 0,
					waterTempSensor1Error: (res.data[0] & (1 << 3)) !== 0,
					waterTempSensor2Error: (res.data[0] & (1 << 4)) !== 0,
					fanSpeedError: (res.data[0] & (1 << 8)) !== 0,
					pumpError: (res.data[0] & (1 << 14)) !== 0,
				};
				this.logger.debug(`[${deviceId}] –û—à–∏–±–∫–∏: ${JSON.stringify(errors)} (raw: ${res.data[0]})`);
				return { ...res, errors };
			},
			'—á—Ç–µ–Ω–∏–µ –æ—à–∏–±–æ–∫',
		).then((result) => result?.errors ?? null);
	}

	async getProtectionState(deviceId: number): Promise<number | null> {
		return this.executeModbusOperation(
			deviceId,
			async () => {
				this.logger.debug(`[${deviceId}] –ß—Ç–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—â–∏—Ç—ã (1614)...`);
				const res: ModbusResponse = await this.client.readHoldingRegisters(1614, 1);
				this.logger.debug(`[${deviceId}] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã: ${res.data[0]}`);
				return res;
			},
			'—á—Ç–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—â–∏—Ç—ã',
		).then((result) => result?.data[0] ?? null);
	}

	getCurrentDevicesState(): DeviceState[] {
		return Array.from(this.devicesState.values());
	}

	// --- –ú–µ—Ç–æ–¥—ã –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---

	/**
	 * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	 */
	async updateDeviceStateImmediately(deviceId: number): Promise<DeviceState | null> {
		try {
			this.logger.log(`[${deviceId}] –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
			const isAvailable = await this.checkDeviceAvailability(deviceId);
			if (!isAvailable) {
				this.logger.warn(`[${deviceId}] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
				return null;
			}

			// –ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
			const mode = await this.getOperatingMode(deviceId);
			const temp = await this.getTemperatureSetpoint(deviceId);
			const speed = await this.getFanSpeed(deviceId);
			const airTemp = await this.getAirTemperature(deviceId);
			const waterTemp = await this.getWaterTemperature(deviceId);
			const pumpStatus = await this.getPumpStatus(deviceId);
			const valveStatus = await this.getValveStatus(deviceId);
			const errors = await this.getErrors(deviceId);
			const protection = await this.getProtectionState(deviceId);

			const updatedState: DeviceState = {
				...this.devicesState.get(deviceId)!,
				isOnline: true,
				mode: mode !== null ? this.convertMode(mode) : '',
				isOn: mode !== null && mode > 0,
				setTemperature: temp || 0,
				fanSpeed: speed || 0,
				temperature: airTemp || 0,
				waterTemperature: waterTemp || 0,
				pumpStatus: pumpStatus || false,
				valveStatus: valveStatus || false,
				errors: errors || this.devicesState.get(deviceId)!.errors,
				protectionState: protection || 0,
			};

			this.devicesState.set(deviceId, updatedState);

			// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
			this.modbusGateway.broadcastDevicesState([updatedState]);

			this.logger.log(`[${deviceId}] –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
			return updatedState;
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error}`);
			return null;
		}
	}

	/**
	 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
	 */
	async readRegisterWithPriority(
		deviceId: number,
		register: number,
		priority: 'high' | 'normal' | 'low' = 'normal',
	): Promise<number | null> {
		return new Promise((resolve) => {
			const requestId = this.addToQueue({
				deviceId,
				type: 'read',
				register,
				priority,
			});

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
			const checkResult = () => {
				// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
				// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
				resolve(null);
			};

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100ms –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
			let attempts = 0;
			const maxAttempts = 100;
			const interval = setInterval(() => {
				attempts++;
				if (attempts >= maxAttempts) {
					clearInterval(interval);
					resolve(null);
				}
				checkResult();
			}, 100);
		});
	}

	/**
	 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
	 */
	async writeRegisterWithPriority(
		deviceId: number,
		register: number,
		value: number,
		priority: 'high' | 'normal' | 'low' = 'normal',
	): Promise<boolean> {
		return new Promise((resolve) => {
			const requestId = this.addToQueue({
				deviceId,
				type: 'write',
				register,
				value,
				priority,
			});

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
			const checkResult = () => {
				// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
				// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
				resolve(false);
			};

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100ms –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
			let attempts = 0;
			const maxAttempts = 100;
			const interval = setInterval(() => {
				attempts++;
				if (attempts >= maxAttempts) {
					clearInterval(interval);
					resolve(false);
				}
				checkResult();
			}, 100);
		});
	}

	// --- –ú–µ—Ç–æ–¥—ã –∑–∞–ø–∏—Å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---

	/**
	 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	 */
	async setOperatingMode(deviceId: number, mode: number): Promise<boolean> {
		try {
			this.logger.log(`[${deviceId}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: ${mode}`);

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
			const writeResult = await this.executeModbusOperation(
				deviceId,
				() => this.client.writeRegister(1601, mode),
				`–∑–∞–ø–∏—Å—å —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã ${mode}`,
			);

			if (!writeResult) {
				this.logger.error(`[${deviceId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã`);
				return false;
			}

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á—Ç–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			await this.timeout(100);
			const readResult = await this.getOperatingMode(deviceId);

			if (readResult === mode) {
				this.logger.log(`[${deviceId}] –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${mode}`);

				// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				await this.updateDeviceStateImmediately(deviceId);

				return true;
			} else {
				this.logger.error(
					`[${deviceId}] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∂–∏–º–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${mode}, –ø–æ–ª—É—á–µ–Ω–æ ${readResult}`,
				);
				return false;
			}
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: ${error}`);
			return false;
		}
	}

	/**
	 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	 */
	async setTemperatureSetpoint(deviceId: number, temperature: number): Promise<boolean> {
		try {
			this.logger.log(`[${deviceId}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: ${temperature}¬∞C`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
			if (temperature < 16 || temperature > 30) {
				this.logger.error(`[${deviceId}] –£—Å—Ç–∞–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${temperature}¬∞C`);
				return false;
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
			const writeResult = await this.executeModbusOperation(
				deviceId,
				() => this.client.writeRegister(1602, temperature),
				`–∑–∞–ø–∏—Å—å —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ${temperature}`,
			);

			if (!writeResult) {
				this.logger.error(`[${deviceId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —É—Å—Ç–∞–≤–∫—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã`);
				return false;
			}

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á—Ç–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			await this.timeout(100);
			const readResult = await this.getTemperatureSetpoint(deviceId);

			if (readResult === temperature) {
				this.logger.log(`[${deviceId}] –£—Å—Ç–∞–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${temperature}¬∞C`);

				// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				await this.updateDeviceStateImmediately(deviceId);

				return true;
			} else {
				this.logger.error(
					`[${deviceId}] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —É—Å—Ç–∞–≤–∫–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å ${temperature}, –ø–æ–ª—É—á–µ–Ω–æ ${readResult}`,
				);
				return false;
			}
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: ${error}`);
			return false;
		}
	}

	/**
	 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	 */
	async setFanSpeed(deviceId: number, speed: number): Promise<boolean> {
		try {
			this.logger.log(`[${deviceId}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞: ${speed}`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
			if (speed < 0 || speed > 4) {
				this.logger.error(`[${deviceId}] –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${speed}`);
				return false;
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
			const writeResult = await this.executeModbusOperation(
				deviceId,
				() => this.client.writeRegister(1603, speed),
				`–∑–∞–ø–∏—Å—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ ${speed}`,
			);

			if (!writeResult) {
				this.logger.error(`[${deviceId}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞`);
				return false;
			}

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á—Ç–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			await this.timeout(100);
			const readResult = await this.getFanSpeed(deviceId);

			if (readResult === speed) {
				this.logger.log(`[${deviceId}] –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${speed}`);

				// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				await this.updateDeviceStateImmediately(deviceId);

				return true;
			} else {
				this.logger.error(
					`[${deviceId}] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å ${speed}, –ø–æ–ª—É—á–µ–Ω–æ ${readResult}`,
				);
				return false;
			}
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞: ${error}`);
			return false;
		}
	}

	/**
	 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	 */
	async setPowerState(deviceId: number, isOn: boolean): Promise<boolean> {
		try {
			const mode = isOn ? 2 : 0; // 2 = –æ–±–æ–≥—Ä–µ–≤, 0 = –≤—ã–∫–ª—é—á–µ–Ω
			this.logger.log(
				`[${deviceId}] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º: ${isOn ? '–≤–∫–ª—é—á–∏—Ç—å' : '–≤—ã–∫–ª—é—á–∏—Ç—å'} (—Ä–µ–∂–∏–º: ${mode})`,
			);

			return await this.setOperatingMode(deviceId, mode);
		} catch (error) {
			this.logger.error(`[${deviceId}] –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º: ${error}`);
			return false;
		}
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
	 */
	getNetworkDiagnostics() {
		return {
			connection: {
				isConnected: this.isConnected,
				currentDevice: this.currentDeviceId,
				requestLock: this.requestLock,
			},
			queue: {
				length: this.requestQueue.length,
				isProcessing: this.isProcessingQueue,
				nextRequest: this.requestQueue[0] || null,
			},
			performance: {
				successRate:
					(this.masterStats.successfulRequests / Math.max(this.masterStats.totalRequests, 1)) * 100,
				averageResponseTime: this.masterStats.averageResponseTime,
				lastRequestTime: this.masterStats.lastRequestTime,
			},
			errors: {
				totalErrors: this.masterStats.failedRequests,
				connectionErrors: this.masterStats.connectionErrors,
				timeoutErrors: this.masterStats.timeoutErrors,
				deviceConflicts: this.masterStats.deviceConflicts,
			},
		};
	}

	/**
	 * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
	 */
	resetStats() {
		this.masterStats = {
			totalRequests: 0,
			successfulRequests: 0,
			failedRequests: 0,
			averageResponseTime: 0,
			lastRequestTime: 0,
			connectionErrors: 0,
			timeoutErrors: 0,
			deviceConflicts: 0,
		};
		this.requestQueue = [];
		this.currentDeviceId = null;
		this.requestLock = false;
		this.logger.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω—ã');
	}
}
